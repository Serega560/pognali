{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\n\n// import { addDays } from 'date-fns';\n\nconst initialState = {\n  // companions: 1,\n  // duration: 2,\n  // dateState: [\n  //     {\n  //       startDate: new Date(),\n  //       endDate: addDays(new Date(), 1),\n  //       key: 'selection'\n  //     }\n  //   ],\n  choosenLetter: 'А',\n  choosenContinent: 'Европа',\n  // Инициализирует выбранный континент\n  isSelectCountryInputActive: false,\n  choosenCountries: [],\n  currentPage: 1\n};\nexport const slice = {\n  app: NameSpace.appSlice\n};\nexport const appSlice = createSlice({\n  name: slice.app,\n  initialState,\n  reducers: {\n    //  setCompanions: (state, action: PayloadAction<number>) => {\n    //   state.companions = action.payload;\n    //  },\n    //  setDuration: (state, action: PayloadAction<number>) => {\n    //   state.duration = action.payload;\n    //  },\n    //  setDateState: (state, action: PayloadAction<DateState[]>) => {\n    //   state.dateState = action.payload;\n    //  },\n    setLetter: (state, action) => {\n      state.choosenLetter = action.payload;\n    },\n    setContinent: (state, action) => {\n      // Добавляет редуктор для установки выбранного континента\n      state.choosenContinent = action.payload;\n    },\n    setIsSelectCountryInputActive: state => {\n      state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\n    },\n    addChoosenCountries: (state, action) => {\n      state.choosenCountries = [...state.choosenCountries, action.payload];\n    },\n    changeChoosenCountry: (state, action) => {\n      const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\n      state.choosenCountries[index] = action.payload.newCountry;\n    },\n    removeChoosenCountry: (state, action) => {\n      state.choosenCountries = state.choosenCountries.filter(country => country.name !== action.payload.name);\n    },\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    }\n  }\n});\nexport const {\n  // setCompanions,\n  // setDateState,\n  // setDuration,\n  setLetter,\n  setContinent,\n  setIsSelectCountryInputActive,\n  addChoosenCountries,\n  changeChoosenCountry,\n  removeChoosenCountry,\n  setCurrentPage\n} = appSlice.actions;","map":{"version":3,"names":["createSlice","NameSpace","initialState","choosenLetter","choosenContinent","isSelectCountryInputActive","choosenCountries","currentPage","slice","app","appSlice","name","reducers","setLetter","state","action","payload","setContinent","setIsSelectCountryInputActive","addChoosenCountries","changeChoosenCountry","index","findIndex","country","currentCountry","newCountry","removeChoosenCountry","filter","setCurrentPage","actions"],"sources":["C:/Projects/intern-pognali-2-6/my-app/src/store/app-slice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from '@reduxjs/toolkit';\r\nimport { NameSpace } from '../const';\r\nimport { CountriesToChange, Country } from '../types';\r\n// import { addDays } from 'date-fns';\r\n\r\nexport type DateState = {\r\n  startDate: Date;\r\n  endDate: Date;\r\n  key: string;\r\n};\r\n\r\nexport type AppSlice = {\r\n//  companions: number;\r\n//  duration: number;\r\n//  dateState: DateState[];\r\n choosenLetter: string;\r\n choosenContinent: string; // Добавляет состояние для выбранного континента\r\n isSelectCountryInputActive: boolean;\r\n choosenCountries: Country[];\r\n currentPage: number;\r\n}\r\n\r\nconst initialState: AppSlice = {\r\n    // companions: 1,\r\n    // duration: 2,\r\n    // dateState: [\r\n    //     {\r\n    //       startDate: new Date(),\r\n    //       endDate: addDays(new Date(), 1),\r\n    //       key: 'selection'\r\n    //     }\r\n    //   ],\r\n    choosenLetter: 'А',\r\n    choosenContinent: 'Европа', // Инициализирует выбранный континент\r\n    isSelectCountryInputActive: false,\r\n    choosenCountries: [],\r\n    currentPage: 1,\r\n};\r\n\r\nexport const slice = {\r\n  app: NameSpace.appSlice,\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n  name: slice.app,\r\n  initialState,\r\n  reducers: {\r\n  //  setCompanions: (state, action: PayloadAction<number>) => {\r\n  //   state.companions = action.payload;\r\n  //  },\r\n  //  setDuration: (state, action: PayloadAction<number>) => {\r\n  //   state.duration = action.payload;\r\n  //  },\r\n  //  setDateState: (state, action: PayloadAction<DateState[]>) => {\r\n  //   state.dateState = action.payload;\r\n  //  },\r\n   setLetter: (state, action: PayloadAction<string>) => {\r\n    state.choosenLetter = action.payload;\r\n   },\r\n   setContinent: (state, action: PayloadAction<string>) => { // Добавляет редуктор для установки выбранного континента\r\n    state.choosenContinent = action.payload;\r\n   },\r\n   setIsSelectCountryInputActive: (state) => {\r\n    state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\r\n   },\r\n   addChoosenCountries: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = [...state.choosenCountries, action.payload]\r\n   },\r\n   changeChoosenCountry: (state, action: PayloadAction<CountriesToChange>) => {\r\n    const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\r\n    state.choosenCountries[index] = action.payload.newCountry;\r\n   },\r\n   removeChoosenCountry: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = state.choosenCountries.filter((country) => country.name !== action.payload.name);\r\n   },\r\n   setCurrentPage: (state, action: PayloadAction<number>) => {\r\n    state.currentPage = action.payload;\r\n   }\r\n  }\r\n});\r\n\r\nexport const {\r\n    // setCompanions,\r\n    // setDateState,\r\n    // setDuration,\r\n    setLetter,\r\n    setContinent,\r\n    setIsSelectCountryInputActive,\r\n    addChoosenCountries,\r\n    changeChoosenCountry,\r\n    removeChoosenCountry,\r\n    setCurrentPage\r\n} = appSlice.actions;\r\n"],"mappings":"AAAA,SAAwBA,WAAW,QAAQ,kBAAkB;AAC7D,SAASC,SAAS,QAAQ,UAAU;;AAEpC;;AAmBA,MAAMC,YAAsB,GAAG;EAC3B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,aAAa,EAAE,GAAG;EAClBC,gBAAgB,EAAE,QAAQ;EAAE;EAC5BC,0BAA0B,EAAE,KAAK;EACjCC,gBAAgB,EAAE,EAAE;EACpBC,WAAW,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG;EACnBC,GAAG,EAAER,SAAS,CAACS;AACjB,CAAC;AAED,OAAO,MAAMA,QAAQ,GAAGV,WAAW,CAAC;EAClCW,IAAI,EAAEH,KAAK,CAACC,GAAG;EACfP,YAAY;EACZU,QAAQ,EAAE;IACV;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACCC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACpDD,KAAK,CAACX,aAAa,GAAGY,MAAM,CAACC,OAAO;IACrC,CAAC;IACDC,YAAY,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MAAE;MACzDD,KAAK,CAACV,gBAAgB,GAAGW,MAAM,CAACC,OAAO;IACxC,CAAC;IACDE,6BAA6B,EAAGJ,KAAK,IAAK;MACzCA,KAAK,CAACT,0BAA0B,GAAG,CAACS,KAAK,CAACT,0BAA0B;IACrE,CAAC;IACDc,mBAAmB,EAAEA,CAACL,KAAK,EAAEC,MAA8B,KAAK;MAC/DD,KAAK,CAACR,gBAAgB,GAAG,CAAC,GAAGQ,KAAK,CAACR,gBAAgB,EAAES,MAAM,CAACC,OAAO,CAAC;IACrE,CAAC;IACDI,oBAAoB,EAAEA,CAACN,KAAK,EAAEC,MAAwC,KAAK;MAC1E,MAAMM,KAAK,GAAGP,KAAK,CAACR,gBAAgB,CAACgB,SAAS,CAACC,OAAO,IAAIA,OAAO,CAACZ,IAAI,KAAKI,MAAM,CAACC,OAAO,CAACQ,cAAc,CAACb,IAAI,CAAC;MAC9GG,KAAK,CAACR,gBAAgB,CAACe,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO,CAACS,UAAU;IAC1D,CAAC;IACDC,oBAAoB,EAAEA,CAACZ,KAAK,EAAEC,MAA8B,KAAK;MAChED,KAAK,CAACR,gBAAgB,GAAGQ,KAAK,CAACR,gBAAgB,CAACqB,MAAM,CAAEJ,OAAO,IAAKA,OAAO,CAACZ,IAAI,KAAKI,MAAM,CAACC,OAAO,CAACL,IAAI,CAAC;IAC1G,CAAC;IACDiB,cAAc,EAAEA,CAACd,KAAK,EAAEC,MAA6B,KAAK;MACzDD,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO;IACnC;EACD;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACT;EACA;EACA;EACAH,SAAS;EACTI,YAAY;EACZC,6BAA6B;EAC7BC,mBAAmB;EACnBC,oBAAoB;EACpBM,oBAAoB;EACpBE;AACJ,CAAC,GAAGlB,QAAQ,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}