{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\n\n// import { addDays } from 'date-fns';\n\nconst initialState = {\n  // companions: 1,\n  // duration: 2,\n  // dateState: [\n  //     {\n  //       startDate: new Date(),\n  //       endDate: addDays(new Date(), 1),\n  //       key: 'selection'\n  //     }\n  //   ],\n  choosenLetter: 'А',\n  isSelectCountryInputActive: false,\n  choosenCountries: [],\n  currentPage: 1,\n  dataToPost: {\n    startDate: '',\n    endDate: '',\n    companions: 0,\n    text: '',\n    transport_choice: [],\n    name: '',\n    hashtags: [],\n    countries: []\n  }\n};\nexport const slice = {\n  app: NameSpace.appSlice\n};\nexport const appSlice = createSlice({\n  name: slice.app,\n  initialState,\n  reducers: {\n    //    setCompanions: (state, action: PayloadAction<number>) => {\n    //     state.companions = action.payload;\n    //    },\n    //  setDuration: (state, action: PayloadAction<number>) => {\n    //   state.duration = action.payload;\n    //  },\n    //  setDateState: (state, action: PayloadAction<DateState[]>) => {\n    //   state.dateState = action.payload;\n    //  },\n    setLetter: (state, action) => {\n      state.choosenLetter = action.payload;\n    },\n    setIsSelectCountryInputActive: state => {\n      state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\n    },\n    addChoosenCountries: (state, action) => {\n      state.choosenCountries = [...state.choosenCountries, action.payload];\n    },\n    changeChoosenCountry: (state, action) => {\n      const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\n      state.choosenCountries[index] = action.payload.newCountry;\n    },\n    removeChoosenCountry: (state, action) => {\n      state.choosenCountries = state.choosenCountries.filter(country => country.name !== action.payload.name);\n    },\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    setDataToPostCompanions: (state, action) => {\n      state.dataToPost.companions = action.payload;\n    },\n    setDataToPostStartDate: (state, action) => {\n      state.dataToPost.startDate = action.payload;\n    },\n    setDataToPostEndDate: (state, action) => {\n      state.dataToPost.endDate = action.payload;\n    },\n    setDataToPostText: (state, action) => {\n      state.dataToPost.text = state.dataToPost.text.concat(action.payload);\n    },\n    setDataToPostTransport: (state, action) => {\n      if (state.dataToPost.transport_choice.includes(action.payload)) {\n        state.dataToPost.transport_choice = state.dataToPost.transport_choice.filter(transport => transport !== action.payload);\n      } else {\n        state.dataToPost.transport_choice = [...state.dataToPost.transport_choice, action.payload];\n      }\n    },\n    setDataToPostHashTags: (state, action) => {\n      state.dataToPost.hashtags = action.payload.split(' ');\n    },\n    setDataToPostCountries: state => {\n      state.dataToPost.countries = state.choosenCountries.map(country => country.name);\n    }\n  }\n});\nexport const {\n  // setCompanions,\n  // setDateState,\n  // setDuration,\n  setLetter,\n  setIsSelectCountryInputActive,\n  addChoosenCountries,\n  changeChoosenCountry,\n  removeChoosenCountry,\n  setCurrentPage,\n  setDataToPostCompanions,\n  setDataToPostCountries,\n  setDataToPostText,\n  setDataToPostHashTags,\n  setDataToPostTransport\n} = appSlice.actions;","map":{"version":3,"names":["createSlice","NameSpace","initialState","choosenLetter","isSelectCountryInputActive","choosenCountries","currentPage","dataToPost","startDate","endDate","companions","text","transport_choice","name","hashtags","countries","slice","app","appSlice","reducers","setLetter","state","action","payload","setIsSelectCountryInputActive","addChoosenCountries","changeChoosenCountry","index","findIndex","country","currentCountry","newCountry","removeChoosenCountry","filter","setCurrentPage","setDataToPostCompanions","setDataToPostStartDate","setDataToPostEndDate","setDataToPostText","concat","setDataToPostTransport","includes","transport","setDataToPostHashTags","split","setDataToPostCountries","map","actions"],"sources":["C:/Стажировка/intern-pognali-2-6/my-app/src/store/app-slice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from '@reduxjs/toolkit';\r\nimport { NameSpace } from '../const';\r\nimport { CountriesToChange, Country, DataToPost } from '../types';\r\n// import { addDays } from 'date-fns';\r\n\r\nexport type DateState = {\r\n    startDate: Date;\r\n    endDate: Date;\r\n    key: string;\r\n}\r\n\r\nexport type AppSlice = {\r\n//  companions: number;\r\n//  duration: number;\r\n//  dateState: DateState[];\r\n choosenLetter: string;\r\n isSelectCountryInputActive: boolean;\r\n choosenCountries: Country[];\r\n currentPage: number;\r\n dataToPost: DataToPost;\r\n}\r\n\r\nconst initialState: AppSlice = {\r\n    // companions: 1,\r\n    // duration: 2,\r\n    // dateState: [\r\n    //     {\r\n    //       startDate: new Date(),\r\n    //       endDate: addDays(new Date(), 1),\r\n    //       key: 'selection'\r\n    //     }\r\n    //   ],\r\n    choosenLetter: 'А',\r\n    isSelectCountryInputActive: false,\r\n    choosenCountries: [],\r\n    currentPage: 1,\r\n    dataToPost: {\r\n        startDate: '',\r\n        endDate: '',\r\n        companions: 0,\r\n        text: '',\r\n        transport_choice: [],\r\n        name: '',\r\n        hashtags: [],\r\n        countries: []\r\n    },\r\n};\r\n\r\nexport const slice = {\r\n    app: NameSpace.appSlice\r\n}\r\n\r\nexport const appSlice = createSlice({\r\n  name: slice.app,\r\n  initialState,\r\n  reducers: {\r\n//    setCompanions: (state, action: PayloadAction<number>) => {\r\n//     state.companions = action.payload;\r\n//    },\r\n  //  setDuration: (state, action: PayloadAction<number>) => {\r\n  //   state.duration = action.payload;\r\n  //  },\r\n  //  setDateState: (state, action: PayloadAction<DateState[]>) => {\r\n  //   state.dateState = action.payload;\r\n  //  },\r\n   setLetter: (state, action: PayloadAction<string>) => {\r\n    state.choosenLetter = action.payload;\r\n   },\r\n   setIsSelectCountryInputActive: (state) => {\r\n    state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\r\n   },\r\n   addChoosenCountries: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = [...state.choosenCountries, action.payload];\r\n   },\r\n   changeChoosenCountry: (state, action: PayloadAction<CountriesToChange>) => {\r\n    const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\r\n    state.choosenCountries[index] = action.payload.newCountry;\r\n   },\r\n   removeChoosenCountry: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = state.choosenCountries.filter((country) => country.name !== action.payload.name);\r\n   },\r\n   setCurrentPage: (state, action: PayloadAction<number>) => {\r\n    state.currentPage = action.payload;\r\n   },\r\n   setDataToPostCompanions: (state, action: PayloadAction<number>) => {\r\n    state.dataToPost.companions = action.payload;\r\n   },\r\n   setDataToPostStartDate: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.startDate = action.payload;\r\n   },\r\n   setDataToPostEndDate: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.endDate = action.payload;\r\n   },\r\n   setDataToPostText: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.text = state.dataToPost.text.concat(action.payload);\r\n   },\r\n   setDataToPostTransport: (state, action: PayloadAction<string>) => {\r\n    if (state.dataToPost.transport_choice.includes(action.payload)) {\r\n        state.dataToPost.transport_choice = state.dataToPost.transport_choice.filter((transport) => transport !== action.payload);\r\n    } else {\r\n        state.dataToPost.transport_choice = [...state.dataToPost.transport_choice, action.payload];\r\n    }\r\n    \r\n   },\r\n   setDataToPostHashTags: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.hashtags = action.payload.split(' ');\r\n   },\r\n   setDataToPostCountries: (state) => {\r\n    state.dataToPost.countries = state.choosenCountries.map((country) => country.name);\r\n   }\r\n  }\r\n});\r\n\r\nexport const {\r\n    // setCompanions,\r\n    // setDateState,\r\n    // setDuration,\r\n    setLetter,\r\n    setIsSelectCountryInputActive,\r\n    addChoosenCountries,\r\n    changeChoosenCountry,\r\n    removeChoosenCountry,\r\n    setCurrentPage,\r\n    setDataToPostCompanions,\r\n    setDataToPostCountries,\r\n    setDataToPostText,\r\n    setDataToPostHashTags,\r\n    setDataToPostTransport\r\n} = appSlice.actions;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}