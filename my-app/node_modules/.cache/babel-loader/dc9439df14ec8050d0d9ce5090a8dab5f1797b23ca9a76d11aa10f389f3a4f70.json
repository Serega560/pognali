{"ast":null,"code":"import React from'react';import{useMediaQuery}from'react-responsive';import{letterArray}from'../../../const';import{useAppDispatch,useAppSelector}from'../../../hooks/hooks';import{setLetter}from'../../../store/app-slice';import{useGetCountriesNamesQuery}from'../../../store/countries-api';import'./country-sorting.module.scss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function CountrySorting(){const dispatch=useAppDispatch();const choosenLetter=useAppSelector(state=>state.appSlice.choosenLetter);const isTabletOrMobile=useMediaQuery({query:'(max-width: 1023px)'});// Используем хук для получения стран только для мобильных и планшетов\nconst{data:filteredCountries,isLoading:isLoadingFiltered}=useGetCountriesNamesQuery(choosenLetter);// Используем другой подход для получения всех стран для десктопа\nconst{data:allCountries,isLoading:isLoadingAll}=useGetCountriesNamesQuery('');// Используем пустую строку для получения всех стран\n// Функция для группировки стран по первой букве\nconst groupCountriesByLetter=countries=>{const grouped={};countries===null||countries===void 0?void 0:countries.forEach(country=>{const firstLetter=country.name.charAt(0).toUpperCase();if(!grouped[firstLetter]){grouped[firstLetter]=[];}grouped[firstLetter].push(country);});return grouped;};const groupedCountries=groupCountriesByLetter(allCountries);return/*#__PURE__*/_jsx(\"div\",{className:\"country-sorting\",children:isTabletOrMobile?/*#__PURE__*/_jsx(\"div\",{className:\"country-sorting__tablet\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"country-sorting__inner-wrapper\",children:[/*#__PURE__*/_jsx(\"ul\",{className:\"country-sorting__letters-list\",children:letterArray.map((letter,index)=>/*#__PURE__*/_jsx(\"li\",{className:\"country-sorting__letter-item\",children:/*#__PURE__*/_jsx(\"button\",{className:\"country-sorting__letter-button \".concat(choosenLetter===letter?'active':''),type:\"button\",onClick:()=>dispatch(setLetter(letter)),children:letter})},index))}),/*#__PURE__*/_jsxs(\"ul\",{className:\"country-sorting__counties-list\",children:[isLoadingFiltered&&/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}),filteredCountries===null||filteredCountries===void 0?void 0:filteredCountries.map(country=>/*#__PURE__*/_jsx(\"li\",{className:\"country-sorting__counties-item\",children:country.name},country.name))]})]})}):/*#__PURE__*/_jsx(\"div\",{className:\"country-sorting__desktop\",children:letterArray.map((letter,index)=>{var _groupedCountries$let;return/*#__PURE__*/_jsxs(\"div\",{className:\"country-sorting__group\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"country-sorting__letter-title\",children:letter}),/*#__PURE__*/_jsxs(\"ul\",{className:\"country-sorting__counties-list\",children:[isLoadingAll&&/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}),(_groupedCountries$let=groupedCountries[letter])===null||_groupedCountries$let===void 0?void 0:_groupedCountries$let.map(country=>/*#__PURE__*/_jsx(\"li\",{className:\"country-sorting__counties-item\",children:country.name},country.name))]})]},index);})})});}export default CountrySorting;","map":{"version":3,"names":["React","useMediaQuery","letterArray","useAppDispatch","useAppSelector","setLetter","useGetCountriesNamesQuery","jsx","_jsx","jsxs","_jsxs","CountrySorting","dispatch","choosenLetter","state","appSlice","isTabletOrMobile","query","data","filteredCountries","isLoading","isLoadingFiltered","allCountries","isLoadingAll","groupCountriesByLetter","countries","grouped","forEach","country","firstLetter","name","charAt","toUpperCase","push","groupedCountries","className","children","map","letter","index","concat","type","onClick","_groupedCountries$let"],"sources":["C:/Стажировка/intern-pognali-2-6/my-app/src/components/blocks/country-sorting/country-sorting.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { letterArray } from '../../../const';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport { setLetter } from '../../../store/app-slice';\r\nimport { useGetCountriesNamesQuery } from '../../../store/countries-api';\r\nimport { Country } from '../../../types';\r\nimport './country-sorting.module.scss';\r\n\r\nfunction CountrySorting(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const choosenLetter = useAppSelector(state => state.appSlice.choosenLetter);\r\n\r\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1023px)' });\r\n\r\n  // Используем хук для получения стран только для мобильных и планшетов\r\n  const { data: filteredCountries, isLoading: isLoadingFiltered } = useGetCountriesNamesQuery(choosenLetter);\r\n\r\n  // Используем другой подход для получения всех стран для десктопа\r\n  const { data: allCountries, isLoading: isLoadingAll } = useGetCountriesNamesQuery(''); // Используем пустую строку для получения всех стран\r\n\r\n  // Функция для группировки стран по первой букве\r\n  const groupCountriesByLetter = (countries: Country[] | undefined) => {\r\n    const grouped: { [key: string]: Country[] } = {};\r\n    countries?.forEach(country => {\r\n      const firstLetter = country.name.charAt(0).toUpperCase();\r\n      if (!grouped[firstLetter]) {\r\n        grouped[firstLetter] = [];\r\n      }\r\n      grouped[firstLetter].push(country);\r\n    });\r\n    return grouped;\r\n  };\r\n\r\n  const groupedCountries = groupCountriesByLetter(allCountries);\r\n\r\n  return (\r\n    <div className=\"country-sorting\">\r\n      {isTabletOrMobile ? (\r\n        <div className=\"country-sorting__tablet\">\r\n          <div className=\"country-sorting__inner-wrapper\">\r\n            <ul className=\"country-sorting__letters-list\">\r\n              {letterArray.map((letter: string, index: number) => (\r\n                <li className=\"country-sorting__letter-item\" key={index}>\r\n                  <button\r\n                    className={`country-sorting__letter-button ${choosenLetter === letter ? 'active' : ''}`}\r\n                    type=\"button\"\r\n                    onClick={() => dispatch(setLetter(letter))}\r\n                  >\r\n                    {letter}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <ul className=\"country-sorting__counties-list\">\r\n              {isLoadingFiltered && <div>Loading...</div>}\r\n              {filteredCountries?.map((country: Country) => (\r\n                <li className=\"country-sorting__counties-item\" key={country.name}>\r\n                  {country.name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"country-sorting__desktop\">\r\n          {letterArray.map((letter: string, index: number) => (\r\n            <div key={index} className=\"country-sorting__group\">\r\n              <h3 className=\"country-sorting__letter-title\">{letter}</h3>\r\n              <ul className=\"country-sorting__counties-list\">\r\n                {isLoadingAll && <div>Loading...</div>}\r\n                {groupedCountries[letter]?.map((country: Country) => (\r\n                  <li className=\"country-sorting__counties-item\" key={country.name}>\r\n                    {country.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountrySorting;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}