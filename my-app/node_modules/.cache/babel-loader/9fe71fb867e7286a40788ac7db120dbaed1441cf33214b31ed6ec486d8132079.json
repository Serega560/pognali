{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import{NameSpace}from'../const';import{addDays}from'date-fns';const initialState={companions:1,duration:2,dateState:[{startDate:new Date(),endDate:addDays(new Date(),1),key:'selection'}],choosenLetter:'А',choosenContinent:'Европа',// Инициализирует выбранный континент\nisSelectCountryInputActive:false,choosenCountries:[],currentPage:1,dataToPost:{startDate:'',endDate:'',companions:0,text:'',transport_choice:[],name:'',hashtags:[],countries:[]}};export const slice={app:NameSpace.appSlice};export const appSlice=createSlice({name:slice.app,initialState,reducers:{setCompanions:(state,action)=>{state.companions=action.payload;},setDuration:(state,action)=>{state.duration=action.payload;},setDateState:(state,action)=>{state.dateState=action.payload;},setLetter:(state,action)=>{state.choosenLetter=action.payload;},setContinent:(state,action)=>{// Добавляет редуктор для установки выбранного континента\nstate.choosenContinent=action.payload;},setIsSelectCountryInputActive:state=>{state.isSelectCountryInputActive=!state.isSelectCountryInputActive;},addChoosenCountries:(state,action)=>{state.choosenCountries=[...state.choosenCountries,action.payload];},changeChoosenCountry:(state,action)=>{const index=state.choosenCountries.findIndex(country=>country.name===action.payload.currentCountry.name);state.choosenCountries[index]=action.payload.newCountry;},removeChoosenCountry:(state,action)=>{state.choosenCountries=state.choosenCountries.filter(country=>country.name!==action.payload.name);},setCurrentPage:(state,action)=>{state.currentPage=action.payload;},setDataToPostCompanions:(state,action)=>{state.dataToPost.companions=action.payload;},setDataToPostStartDate:(state,action)=>{state.dataToPost.startDate=action.payload;},setDataToPostEndDate:(state,action)=>{state.dataToPost.endDate=action.payload;},setDataToPostText:(state,action)=>{state.dataToPost.text=state.dataToPost.text.concat(action.payload);},setDataToPostTransport:(state,action)=>{if(state.dataToPost.transport_choice.includes(action.payload)){state.dataToPost.transport_choice=state.dataToPost.transport_choice.filter(transport=>transport!==action.payload);}else{state.dataToPost.transport_choice=[...state.dataToPost.transport_choice,action.payload];}},setDataToPostHashTags:(state,action)=>{state.dataToPost.hashtags=action.payload.split(' ');},setDataToPostCountries:state=>{state.dataToPost.countries=state.choosenCountries.map(country=>country.name);}}});export const{setCompanions,setDateState,setDuration,setLetter,setContinent,setIsSelectCountryInputActive,addChoosenCountries,changeChoosenCountry,removeChoosenCountry,setCurrentPage,setDataToPostCompanions,setDataToPostCountries,setDataToPostText,setDataToPostHashTags,setDataToPostTransport}=appSlice.actions;","map":{"version":3,"names":["createSlice","NameSpace","addDays","initialState","companions","duration","dateState","startDate","Date","endDate","key","choosenLetter","choosenContinent","isSelectCountryInputActive","choosenCountries","currentPage","dataToPost","text","transport_choice","name","hashtags","countries","slice","app","appSlice","reducers","setCompanions","state","action","payload","setDuration","setDateState","setLetter","setContinent","setIsSelectCountryInputActive","addChoosenCountries","changeChoosenCountry","index","findIndex","country","currentCountry","newCountry","removeChoosenCountry","filter","setCurrentPage","setDataToPostCompanions","setDataToPostStartDate","setDataToPostEndDate","setDataToPostText","concat","setDataToPostTransport","includes","transport","setDataToPostHashTags","split","setDataToPostCountries","map","actions"],"sources":["C:/Стажировка/intern-pognali-2-6/my-app/src/store/app-slice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from '@reduxjs/toolkit';\r\nimport { NameSpace } from '../const';\r\nimport { CountriesToChange, Country, DataToPost } from '../types';\r\nimport { addDays } from 'date-fns';\r\n\r\nexport type DateState = {\r\n  startDate: Date;\r\n  endDate: Date;\r\n  key: string;\r\n};\r\n\r\nexport type AppSlice = {\r\n companions: number;\r\n duration: number;\r\n dateState: DateState[];\r\n choosenLetter: string;\r\n choosenContinent: string; // Добавляет состояние для выбранного континента\r\n isSelectCountryInputActive: boolean;\r\n choosenCountries: Country[];\r\n currentPage: number;\r\n dataToPost: DataToPost;\r\n}\r\n\r\nconst initialState: AppSlice = {\r\n    companions: 1,\r\n    duration: 2,\r\n    dateState: [\r\n        {\r\n          startDate: new Date(),\r\n          endDate: addDays(new Date(), 1),\r\n          key: 'selection'\r\n        }\r\n      ],\r\n    choosenLetter: 'А',\r\n    choosenContinent: 'Европа', // Инициализирует выбранный континент\r\n    isSelectCountryInputActive: false,\r\n    choosenCountries: [],\r\n    currentPage: 1,\r\n    dataToPost: {\r\n        startDate: '',\r\n        endDate: '',\r\n        companions: 0,\r\n        text: '',\r\n        transport_choice: [],\r\n        name: '',\r\n        hashtags: [],\r\n        countries: []\r\n    },\r\n};\r\n\r\nexport const slice = {\r\n  app: NameSpace.appSlice,\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n  name: slice.app,\r\n  initialState,\r\n  reducers: {\r\n   setCompanions: (state, action: PayloadAction<number>) => {\r\n    state.companions = action.payload;\r\n   },\r\n   setDuration: (state, action: PayloadAction<number>) => {\r\n    state.duration = action.payload;\r\n   },\r\n   setDateState: (state, action: PayloadAction<DateState[]>) => {\r\n    state.dateState = action.payload;\r\n   },\r\n   setLetter: (state, action: PayloadAction<string>) => {\r\n    state.choosenLetter = action.payload;\r\n   },\r\n   setContinent: (state, action: PayloadAction<string>) => { // Добавляет редуктор для установки выбранного континента\r\n    state.choosenContinent = action.payload;\r\n   },\r\n   setIsSelectCountryInputActive: (state) => {\r\n    state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\r\n   },\r\n   addChoosenCountries: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = [...state.choosenCountries, action.payload];\r\n   },\r\n   changeChoosenCountry: (state, action: PayloadAction<CountriesToChange>) => {\r\n    const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\r\n    state.choosenCountries[index] = action.payload.newCountry;\r\n   },\r\n   removeChoosenCountry: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = state.choosenCountries.filter((country) => country.name !== action.payload.name);\r\n   },\r\n   setCurrentPage: (state, action: PayloadAction<number>) => {\r\n    state.currentPage = action.payload;\r\n   },\r\n   setDataToPostCompanions: (state, action: PayloadAction<number>) => {\r\n    state.dataToPost.companions = action.payload;\r\n   },\r\n   setDataToPostStartDate: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.startDate = action.payload;\r\n   },\r\n   setDataToPostEndDate: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.endDate = action.payload;\r\n   },\r\n   setDataToPostText: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.text = state.dataToPost.text.concat(action.payload);\r\n   },\r\n   setDataToPostTransport: (state, action: PayloadAction<string>) => {\r\n    if (state.dataToPost.transport_choice.includes(action.payload)) {\r\n        state.dataToPost.transport_choice = state.dataToPost.transport_choice.filter((transport) => transport !== action.payload);\r\n    } else {\r\n        state.dataToPost.transport_choice = [...state.dataToPost.transport_choice, action.payload];\r\n    }\r\n\r\n   },\r\n   setDataToPostHashTags: (state, action: PayloadAction<string>) => {\r\n    state.dataToPost.hashtags = action.payload.split(' ');\r\n   },\r\n   setDataToPostCountries: (state) => {\r\n    state.dataToPost.countries = state.choosenCountries.map((country) => country.name);\r\n   }\r\n  }\r\n});\r\n\r\nexport const {\r\n    setCompanions,\r\n    setDateState,\r\n    setDuration,\r\n    setLetter,\r\n    setContinent,\r\n    setIsSelectCountryInputActive,\r\n    addChoosenCountries,\r\n    changeChoosenCountry,\r\n    removeChoosenCountry,\r\n    setCurrentPage,\r\n    setDataToPostCompanions,\r\n    setDataToPostCountries,\r\n    setDataToPostText,\r\n    setDataToPostHashTags,\r\n    setDataToPostTransport\r\n} = appSlice.actions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}