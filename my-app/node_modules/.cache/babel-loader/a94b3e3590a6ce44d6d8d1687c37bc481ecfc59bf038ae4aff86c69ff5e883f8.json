{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\intern-pognali-2-6\\\\my-app\\\\src\\\\components\\\\blocks\\\\country-sorting\\\\country-sorting.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { letterArray } from '../../../const';\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\nimport { setLetter } from '../../../store/app-slice';\nimport { useGetCountriesNamesQuery } from '../../../store/countries-api';\nimport './country-sorting.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CountrySorting() {\n  _s();\n  const dispatch = useAppDispatch();\n  const choosenLetter = useAppSelector(state => state.appSlice.choosenLetter); // выбранная буква\n  const {\n    data: filteredCountries,\n    isLoading\n  } = useGetCountriesNamesQuery(choosenLetter); // filteredCountries это массив объектов со странами по выбранной букве\n\n  const isTabletOrMobile = useMediaQuery({\n    query: '(max-width: 1023px)'\n  });\n\n  // Функция для группировки стран по первой букве\n  const groupCountriesByLetter = countries => {\n    const grouped = {};\n    countries === null || countries === void 0 ? void 0 : countries.forEach(country => {\n      const firstLetter = country.name.charAt(0).toUpperCase();\n      if (!grouped[firstLetter]) {\n        grouped[firstLetter] = [];\n      }\n      grouped[firstLetter].push(country);\n    });\n    return grouped;\n  };\n  const groupedCountries = groupCountriesByLetter(filteredCountries);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"country-sorting\",\n    children: isTabletOrMobile ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-sorting__tablet\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"country-sorting__inner-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"country-sorting__letters-list\",\n          children: letterArray.map((letter, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"country-sorting__letter-item\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `country-sorting__letter-button ${choosenLetter === letter ? 'active' : ''}`,\n              type: \"button\",\n              onClick: () => dispatch(setLetter(letter)),\n              children: letter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"country-sorting__counties-list\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), filteredCountries === null || filteredCountries === void 0 ? void 0 : filteredCountries.map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"country-sorting__counties-item\",\n            children: country.name\n          }, country.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-sorting__desktop\",\n      children: letterArray.map((letter, index) => {\n        var _groupedCountries$let;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"country-sorting__group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"country-sorting__letter-title\",\n            children: letter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"country-sorting__counties-list\",\n            children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 31\n            }, this), (_groupedCountries$let = groupedCountries[letter]) === null || _groupedCountries$let === void 0 ? void 0 : _groupedCountries$let.map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"country-sorting__counties-item\",\n              children: country.name\n            }, country.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(CountrySorting, \"4soLsX9wGFP4gweB8hybzNPFrEM=\", false, function () {\n  return [useAppDispatch, useAppSelector, useGetCountriesNamesQuery, useMediaQuery];\n});\n_c = CountrySorting;\nexport default CountrySorting;\nvar _c;\n$RefreshReg$(_c, \"CountrySorting\");","map":{"version":3,"names":["React","useMediaQuery","letterArray","useAppDispatch","useAppSelector","setLetter","useGetCountriesNamesQuery","jsxDEV","_jsxDEV","CountrySorting","_s","dispatch","choosenLetter","state","appSlice","data","filteredCountries","isLoading","isTabletOrMobile","query","groupCountriesByLetter","countries","grouped","forEach","country","firstLetter","name","charAt","toUpperCase","push","groupedCountries","className","children","map","letter","index","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_groupedCountries$let","_c","$RefreshReg$"],"sources":["C:/Projects/intern-pognali-2-6/my-app/src/components/blocks/country-sorting/country-sorting.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport { letterArray } from '../../../const';\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks/hooks';\r\nimport { setLetter } from '../../../store/app-slice';\r\nimport { useGetCountriesNamesQuery } from '../../../store/countries-api';\r\nimport { Country } from '../../../types';\r\nimport './country-sorting.module.scss';\r\n\r\nfunction CountrySorting(): JSX.Element {\r\n  const dispatch = useAppDispatch();\r\n  const choosenLetter = useAppSelector(state => state.appSlice.choosenLetter); // выбранная буква\r\n  const { data: filteredCountries, isLoading } = useGetCountriesNamesQuery(choosenLetter); // filteredCountries это массив объектов со странами по выбранной букве\r\n\r\n  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 1023px)' });\r\n\r\n  // Функция для группировки стран по первой букве\r\n  const groupCountriesByLetter = (countries: Country[] | undefined) => {\r\n    const grouped: { [key: string]: Country[] } = {};\r\n    countries?.forEach(country => {\r\n      const firstLetter = country.name.charAt(0).toUpperCase();\r\n      if (!grouped[firstLetter]) {\r\n        grouped[firstLetter] = [];\r\n      }\r\n      grouped[firstLetter].push(country);\r\n    });\r\n    return grouped;\r\n  };\r\n\r\n  const groupedCountries = groupCountriesByLetter(filteredCountries);\r\n\r\n  return (\r\n    <div className=\"country-sorting\">\r\n      {isTabletOrMobile ? (\r\n        <div className=\"country-sorting__tablet\">\r\n          <div className=\"country-sorting__inner-wrapper\">\r\n            <ul className=\"country-sorting__letters-list\">\r\n              {letterArray.map((letter: string, index: number) => (\r\n                <li className=\"country-sorting__letter-item\" key={index}>\r\n                  <button\r\n                    className={`country-sorting__letter-button ${choosenLetter === letter ? 'active' : ''}`}\r\n                    type=\"button\"\r\n                    onClick={() => dispatch(setLetter(letter))}\r\n                  >\r\n                    {letter}\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <ul className=\"country-sorting__counties-list\">\r\n              {isLoading && <div>Loading...</div>}\r\n              {filteredCountries?.map((country: Country) => (\r\n                <li className=\"country-sorting__counties-item\" key={country.name}>\r\n                  {country.name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"country-sorting__desktop\">\r\n          {letterArray.map((letter: string, index: number) => (\r\n            <div key={index} className=\"country-sorting__group\">\r\n              <h3 className=\"country-sorting__letter-title\">{letter}</h3>\r\n              <ul className=\"country-sorting__counties-list\">\r\n                {isLoading && <div>Loading...</div>}\r\n                {groupedCountries[letter]?.map((country: Country) => (\r\n                  <li className=\"country-sorting__counties-item\" key={country.name}>\r\n                    {country.name}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountrySorting;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}