{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { NameSpace } from '../const';\nimport { addDays } from 'date-fns';\nconst initialState = {\n  companions: 1,\n  duration: 2,\n  startDate: '',\n  endDate: '',\n  dateState: [{\n    startDate: new Date(),\n    endDate: addDays(new Date(), 1),\n    key: 'selection'\n  }],\n  choosenLetter: 'А',\n  choosenContinent: 'Европа',\n  // Инициализирует выбранный континент\n  isSelectCountryInputActive: false,\n  choosenCountries: [],\n  currentPage: 1,\n  name: 'Vasya',\n  text: '',\n  hashtags: [],\n  transport_choice: []\n  // dataToPost: {\n  //     startDate: '',\n  //     endDate: '',\n  //     companions: 0,\n  //     text: '',\n  //     transport_choice: [],\n  //     name: '',\n  //     hashtags: [],\n  //     countries: []\n  // },\n};\nexport const slice = {\n  app: NameSpace.appSlice\n};\nexport const appSlice = createSlice({\n  name: slice.app,\n  initialState,\n  reducers: {\n    setCompanions: (state, action) => {\n      state.companions = action.payload;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload;\n    },\n    setDateState: (state, action) => {\n      state.dateState = action.payload;\n    },\n    setLetter: (state, action) => {\n      state.choosenLetter = action.payload;\n    },\n    setContinent: (state, action) => {\n      // Добавляет редуктор для установки выбранного континента\n      state.choosenContinent = action.payload;\n    },\n    setIsSelectCountryInputActive: state => {\n      state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\n    },\n    addChoosenCountries: (state, action) => {\n      state.choosenCountries = [...state.choosenCountries, action.payload];\n    },\n    changeChoosenCountry: (state, action) => {\n      const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\n      state.choosenCountries[index] = action.payload.newCountry;\n    },\n    removeChoosenCountry: (state, action) => {\n      state.choosenCountries = state.choosenCountries.filter(country => country.name !== action.payload.name);\n    },\n    setCurrentPage: (state, action) => {\n      state.currentPage = action.payload;\n    },\n    //  setDataToPostCompanions: (state, action: PayloadAction<number>) => {\n    //   state.dataToPost.companions = action.payload;\n    //  },\n    setStartDate: (state, action) => {\n      state.startDate = action.payload;\n    },\n    setEndDate: (state, action) => {\n      state.endDate = action.payload;\n    },\n    setText: (state, action) => {\n      state.text = state.text.concat(action.payload);\n    },\n    setTransport: (state, action) => {\n      if (state.transport_choice.includes(action.payload)) {\n        state.transport_choice = state.transport_choice.filter(transport => transport !== action.payload);\n      } else {\n        state.transport_choice = [...state.transport_choice, action.payload];\n      }\n    },\n    setHashTags: (state, action) => {\n      state.hashtags = action.payload.split(' ');\n    },\n    resetState: state => {\n      state = initialState;\n    }\n    //  setDataToPostCountries: (state) => {\n    //   state.dataToPost.countries = state.choosenCountries.map((country) => country.name);\n    //  }\n  }\n});\nexport const {\n  setCompanions,\n  setDateState,\n  setDuration,\n  setLetter,\n  setContinent,\n  setIsSelectCountryInputActive,\n  addChoosenCountries,\n  changeChoosenCountry,\n  removeChoosenCountry,\n  setCurrentPage,\n  // setDataToPostCompanions,\n  setEndDate,\n  setStartDate,\n  setHashTags,\n  setText,\n  setTransport,\n  resetState\n  // setDataToPostCountries,\n  // setDataToPostText,\n  // setDataToPostHashTags,\n  // setDataToPostTransport\n} = appSlice.actions;","map":{"version":3,"names":["createSlice","NameSpace","addDays","initialState","companions","duration","startDate","endDate","dateState","Date","key","choosenLetter","choosenContinent","isSelectCountryInputActive","choosenCountries","currentPage","name","text","hashtags","transport_choice","slice","app","appSlice","reducers","setCompanions","state","action","payload","setDuration","setDateState","setLetter","setContinent","setIsSelectCountryInputActive","addChoosenCountries","changeChoosenCountry","index","findIndex","country","currentCountry","newCountry","removeChoosenCountry","filter","setCurrentPage","setStartDate","setEndDate","setText","concat","setTransport","includes","transport","setHashTags","split","resetState","actions"],"sources":["C:/Стажировка/intern-pognali-2-6/my-app/src/store/app-slice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from '@reduxjs/toolkit';\r\nimport { NameSpace } from '../const';\r\nimport { CountriesToChange, Country, DataToPost } from '../types';\r\nimport { addDays } from 'date-fns';\r\n\r\nexport type DateState = {\r\n  startDate: Date;\r\n  endDate: Date;\r\n  key: string;\r\n};\r\n\r\nexport type AppSlice = {\r\n companions: number;\r\n duration: number;\r\n dateState: DateState[];\r\n startDate: string;\r\n endDate: string;\r\n choosenLetter: string;\r\n choosenContinent: string; // Добавляет состояние для выбранного континента\r\n isSelectCountryInputActive: boolean;\r\n choosenCountries: Country[];\r\n currentPage: number;\r\n//  dataToPost: DataToPost;\r\n name: string;\r\n text: string;\r\n hashtags: string[];\r\n transport_choice: string[],\r\n}\r\n\r\nconst initialState: AppSlice = {\r\n    companions: 1,\r\n    duration: 2,\r\n    startDate:'',\r\n    endDate: '',\r\n    dateState: [\r\n        {\r\n          startDate: new Date(),\r\n          endDate: addDays(new Date(), 1),\r\n          key: 'selection'\r\n        }\r\n      ],\r\n    choosenLetter: 'А',\r\n    choosenContinent: 'Европа', // Инициализирует выбранный континент\r\n    isSelectCountryInputActive: false,\r\n    choosenCountries: [],\r\n    currentPage: 1,\r\n    name: 'Vasya',\r\n    text: '',\r\n    hashtags: [],\r\n    transport_choice: [],\r\n    // dataToPost: {\r\n    //     startDate: '',\r\n    //     endDate: '',\r\n    //     companions: 0,\r\n    //     text: '',\r\n    //     transport_choice: [],\r\n    //     name: '',\r\n    //     hashtags: [],\r\n    //     countries: []\r\n    // },\r\n};\r\n\r\nexport const slice = {\r\n  app: NameSpace.appSlice,\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n  name: slice.app,\r\n  initialState,\r\n  reducers: {\r\n   setCompanions: (state, action: PayloadAction<number>) => {\r\n    state.companions = action.payload;\r\n   },\r\n   setDuration: (state, action: PayloadAction<number>) => {\r\n    state.duration = action.payload;\r\n   },\r\n   setDateState: (state, action: PayloadAction<DateState[]>) => {\r\n    state.dateState = action.payload;\r\n   },\r\n   setLetter: (state, action: PayloadAction<string>) => {\r\n    state.choosenLetter = action.payload;\r\n   },\r\n   setContinent: (state, action: PayloadAction<string>) => { // Добавляет редуктор для установки выбранного континента\r\n    state.choosenContinent = action.payload;\r\n   },\r\n   setIsSelectCountryInputActive: (state) => {\r\n    state.isSelectCountryInputActive = !state.isSelectCountryInputActive;\r\n   },\r\n   addChoosenCountries: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = [...state.choosenCountries, action.payload];\r\n   },\r\n   changeChoosenCountry: (state, action: PayloadAction<CountriesToChange>) => {\r\n    const index = state.choosenCountries.findIndex(country => country.name === action.payload.currentCountry.name);\r\n    state.choosenCountries[index] = action.payload.newCountry;\r\n   },\r\n   removeChoosenCountry: (state, action: PayloadAction<Country>) => {\r\n    state.choosenCountries = state.choosenCountries.filter((country) => country.name !== action.payload.name);\r\n   },\r\n   setCurrentPage: (state, action: PayloadAction<number>) => {\r\n    state.currentPage = action.payload;\r\n   },\r\n  //  setDataToPostCompanions: (state, action: PayloadAction<number>) => {\r\n  //   state.dataToPost.companions = action.payload;\r\n  //  },\r\n   setStartDate: (state, action: PayloadAction<string>) => {\r\n    state.startDate = action.payload;\r\n   },\r\n   setEndDate: (state, action: PayloadAction<string>) => {\r\n    state.endDate = action.payload;\r\n   },\r\n   setText: (state, action: PayloadAction<string>) => {\r\n    state.text = state.text.concat(action.payload);\r\n   },\r\n   setTransport: (state, action: PayloadAction<string>) => {\r\n    if (state.transport_choice.includes(action.payload)) {\r\n        state.transport_choice = state.transport_choice.filter((transport) => transport !== action.payload);\r\n    } else {\r\n        state.transport_choice = [...state.transport_choice, action.payload];\r\n    }\r\n\r\n   },\r\n   setHashTags: (state, action: PayloadAction<string>) => {\r\n    state.hashtags = action.payload.split(' ');\r\n   },\r\n   resetState: (state) => {\r\n    state = initialState;\r\n   }\r\n  //  setDataToPostCountries: (state) => {\r\n  //   state.dataToPost.countries = state.choosenCountries.map((country) => country.name);\r\n  //  }\r\n  }\r\n});\r\n\r\nexport const {\r\n    setCompanions,\r\n    setDateState,\r\n    setDuration,\r\n    setLetter,\r\n    setContinent,\r\n    setIsSelectCountryInputActive,\r\n    addChoosenCountries,\r\n    changeChoosenCountry,\r\n    removeChoosenCountry,\r\n    setCurrentPage,\r\n    // setDataToPostCompanions,\r\n    setEndDate,\r\n    setStartDate,\r\n    setHashTags,\r\n    setText,\r\n    setTransport,\r\n    resetState,\r\n    // setDataToPostCountries,\r\n    // setDataToPostText,\r\n    // setDataToPostHashTags,\r\n    // setDataToPostTransport\r\n} = appSlice.actions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}