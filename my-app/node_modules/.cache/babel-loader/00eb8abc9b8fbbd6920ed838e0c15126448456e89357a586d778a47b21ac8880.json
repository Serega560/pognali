{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0421\\u0442\\u0430\\u0436\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\\\\intern-pognali-2-6\\\\my-app\\\\src\\\\components\\\\blocks\\\\selected-coutry-input\\\\selected-country-input.tsx\",\n  _s = $RefreshSig$();\nimport { letterArray } from \"../../../const\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/hooks\";\nimport { changeChoosenCountry, removeChoosenCountry, setLetter } from \"../../../store/app-slice\";\nimport { useGetCountriesNamesQuery } from \"../../../store/countries-api\";\nimport { ReactComponent as MenuButtonClose } from '../../';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SelectedCountryInput = ({\n  selectedCountry\n}) => {\n  _s();\n  const dispatch = useAppDispatch();\n  const choosenLetter = useAppSelector(state => state.appSlice.choosenLetter);\n  const {\n    data: filteredCountries,\n    isLoading\n  } = useGetCountriesNamesQuery(choosenLetter);\n  const handleSelectCountryInputClick = newCountry => {\n    const countriesToChange = {\n      currentCountry: selectedCountry,\n      newCountry: newCountry\n    };\n    dispatch(changeChoosenCountry(countriesToChange));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `route__item-new `,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        onClick: evt => {\n          var _evt$currentTarget$cl;\n          console.log(evt.target);\n          (_evt$currentTarget$cl = evt.currentTarget.closest('div')) === null || _evt$currentTarget$cl === void 0 ? void 0 : _evt$currentTarget$cl.classList.toggle('active');\n          // dispatch(setIsSelectCountryInputActive());\n        },\n        children: selectedCountry.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"route__countries-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"route__letters-list\",\n          children: letterArray.map((letter, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"step__letter-item\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `step__letter-button ${choosenLetter === letter ? 'active' : ''}`,\n                type: \"button\",\n                onClick: () => dispatch(setLetter(letter)),\n                children: letter\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 37\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"route__counties-list\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 39\n          }, this), filteredCountries === null || filteredCountries === void 0 ? void 0 : filteredCountries.map(country => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"route__counties-item counties\",\n              onClick: evt => {\n                var _evt$currentTarget$cl2;\n                handleSelectCountryInputClick(country);\n                (_evt$currentTarget$cl2 = evt.currentTarget.closest('.step__input-container')) === null || _evt$currentTarget$cl2 === void 0 ? void 0 : _evt$currentTarget$cl2.classList.remove('active');\n              },\n              children: country.name\n            }, country.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"step__indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"step__flag\",\n        src: selectedCountry.flag,\n        alt: \"country flag image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"step__button\",\n        type: \"button\",\n        onClick: () => dispatch(removeChoosenCountry(selectedCountry)),\n        children: /*#__PURE__*/_jsxDEV(MenuButtonClose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n};\n_s(SelectedCountryInput, \"fwgVDQgVX4f1wS8F38YVrnlZvUI=\", false, function () {\n  return [useAppDispatch, useAppSelector, useGetCountriesNamesQuery];\n});\n_c = SelectedCountryInput;\nvar _c;\n$RefreshReg$(_c, \"SelectedCountryInput\");","map":{"version":3,"names":["letterArray","useAppDispatch","useAppSelector","changeChoosenCountry","removeChoosenCountry","setLetter","useGetCountriesNamesQuery","ReactComponent","MenuButtonClose","jsxDEV","_jsxDEV","Fragment","_Fragment","SelectedCountryInput","selectedCountry","_s","dispatch","choosenLetter","state","appSlice","data","filteredCountries","isLoading","handleSelectCountryInputClick","newCountry","countriesToChange","currentCountry","children","className","onClick","evt","_evt$currentTarget$cl","console","log","target","currentTarget","closest","classList","toggle","name","fileName","_jsxFileName","lineNumber","columnNumber","map","letter","index","type","country","_evt$currentTarget$cl2","remove","src","flag","alt","_c","$RefreshReg$"],"sources":["C:/Стажировка/intern-pognali-2-6/my-app/src/components/blocks/selected-coutry-input/selected-country-input.tsx"],"sourcesContent":["import { letterArray } from \"../../../const\";\r\nimport { useAppDispatch, useAppSelector } from \"../../../hooks/hooks\";\r\nimport { changeChoosenCountry, removeChoosenCountry, setLetter } from \"../../../store/app-slice\";\r\nimport { useGetCountriesNamesQuery } from \"../../../store/countries-api\";\r\nimport { CountriesToChange, Country } from \"../../../types\";\r\nimport { ReactComponent as MenuButtonClose } from '../../';\r\n\r\n\r\ntype SelectedCoutriesInputProps = {\r\n    selectedCountry: Country;\r\n}\r\n\r\nexport const SelectedCountryInput = ({ selectedCountry }: SelectedCoutriesInputProps) => {\r\n    const dispatch = useAppDispatch();\r\n    const choosenLetter = useAppSelector(state => state.appSlice.choosenLetter);\r\n    const { data: filteredCountries, isLoading } = useGetCountriesNamesQuery(choosenLetter);\r\n    const handleSelectCountryInputClick = (newCountry: Country): void => {\r\n        const countriesToChange: CountriesToChange = {\r\n            currentCountry: selectedCountry,\r\n            newCountry: newCountry\r\n        };\r\n        dispatch(changeChoosenCountry(countriesToChange));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`route__item-new `}>\r\n                <h3\r\n                onClick={(evt) => {\r\n                    console.log(evt.target);\r\n                    evt.currentTarget.closest('div')?.classList.toggle('active');\r\n                    // dispatch(setIsSelectCountryInputActive());\r\n                }}\r\n                >\r\n                    {selectedCountry.name}\r\n                </h3>\r\n                <div className=\"route__countries-wrapper\">\r\n                    <ul className=\"route__letters-list\">\r\n                        {letterArray.map((letter: string, index: number) => {\r\n                            return (\r\n                                <li className=\"step__letter-item\" key={index}>\r\n                                    <button className={`step__letter-button ${choosenLetter === letter ? 'active' : ''}`}\r\n                                        type=\"button\"\r\n                                        onClick={() => dispatch(setLetter(letter))}>{letter}\r\n                                    </button>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                    <ul className=\"route__counties-list\">\r\n                        {isLoading && <div>Loading...</div>}\r\n                        {filteredCountries?.map((country: Country) => {\r\n                            return (\r\n                                <li className=\"route__counties-item counties\"\r\n                                    key={country.name}\r\n                                    onClick={(evt) => {\r\n                                        handleSelectCountryInputClick(country);\r\n                                        evt.currentTarget.closest('.step__input-container')?.classList.remove('active');\r\n                                    }}>{country.name}</li>\r\n                            );\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div><div className=\"step__indicator\">\r\n                <img className=\"step__flag\" src={selectedCountry.flag} alt=\"country flag image\" />\r\n                <button className=\"step__button\" type=\"button\"\r\n                    onClick={() => dispatch(removeChoosenCountry(selectedCountry))}>\r\n                        <MenuButtonClose />\r\n                    </button>\r\n            </div>\r\n        </>\r\n    )\r\n};"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,cAAc,EAAEC,cAAc,QAAQ,sBAAsB;AACrE,SAASC,oBAAoB,EAAEC,oBAAoB,EAAEC,SAAS,QAAQ,0BAA0B;AAChG,SAASC,yBAAyB,QAAQ,8BAA8B;AAExE,SAASC,cAAc,IAAIC,eAAe,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAO3D,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC;AAA4C,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAMC,QAAQ,GAAGf,cAAc,CAAC,CAAC;EACjC,MAAMgB,aAAa,GAAGf,cAAc,CAACgB,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAACF,aAAa,CAAC;EAC3E,MAAM;IAAEG,IAAI,EAAEC,iBAAiB;IAAEC;EAAU,CAAC,GAAGhB,yBAAyB,CAACW,aAAa,CAAC;EACvF,MAAMM,6BAA6B,GAAIC,UAAmB,IAAW;IACjE,MAAMC,iBAAoC,GAAG;MACzCC,cAAc,EAAEZ,eAAe;MAC/BU,UAAU,EAAEA;IAChB,CAAC;IACDR,QAAQ,CAACb,oBAAoB,CAACsB,iBAAiB,CAAC,CAAC;EACrD,CAAC;EAED,oBACIf,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACIjB,OAAA;MAAKkB,SAAS,EAAE,kBAAmB;MAAAD,QAAA,gBAC/BjB,OAAA;QACAmB,OAAO,EAAGC,GAAG,IAAK;UAAA,IAAAC,qBAAA;UACdC,OAAO,CAACC,GAAG,CAACH,GAAG,CAACI,MAAM,CAAC;UACvB,CAAAH,qBAAA,GAAAD,GAAG,CAACK,aAAa,CAACC,OAAO,CAAC,KAAK,CAAC,cAAAL,qBAAA,uBAAhCA,qBAAA,CAAkCM,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;UAC5D;QACJ,CAAE;QAAAX,QAAA,EAEGb,eAAe,CAACyB;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACLjC,OAAA;QAAKkB,SAAS,EAAC,0BAA0B;QAAAD,QAAA,gBACrCjB,OAAA;UAAIkB,SAAS,EAAC,qBAAqB;UAAAD,QAAA,EAC9B3B,WAAW,CAAC4C,GAAG,CAAC,CAACC,MAAc,EAAEC,KAAa,KAAK;YAChD,oBACIpC,OAAA;cAAIkB,SAAS,EAAC,mBAAmB;cAAAD,QAAA,eAC7BjB,OAAA;gBAAQkB,SAAS,EAAE,uBAAuBX,aAAa,KAAK4B,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;gBACjFE,IAAI,EAAC,QAAQ;gBACblB,OAAO,EAAEA,CAAA,KAAMb,QAAQ,CAACX,SAAS,CAACwC,MAAM,CAAC,CAAE;gBAAAlB,QAAA,EAAEkB;cAAM;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/C;YAAC,GAJ0BG,KAAK;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAKxC,CAAC;UAEb,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eACLjC,OAAA;UAAIkB,SAAS,EAAC,sBAAsB;UAAAD,QAAA,GAC/BL,SAAS,iBAAIZ,OAAA;YAAAiB,QAAA,EAAK;UAAU;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAClCtB,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEuB,GAAG,CAAEI,OAAgB,IAAK;YAC1C,oBACItC,OAAA;cAAIkB,SAAS,EAAC,+BAA+B;cAEzCC,OAAO,EAAGC,GAAG,IAAK;gBAAA,IAAAmB,sBAAA;gBACd1B,6BAA6B,CAACyB,OAAO,CAAC;gBACtC,CAAAC,sBAAA,GAAAnB,GAAG,CAACK,aAAa,CAACC,OAAO,CAAC,wBAAwB,CAAC,cAAAa,sBAAA,uBAAnDA,sBAAA,CAAqDZ,SAAS,CAACa,MAAM,CAAC,QAAQ,CAAC;cACnF,CAAE;cAAAvB,QAAA,EAAEqB,OAAO,CAACT;YAAI,GAJXS,OAAO,CAACT,IAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAII,CAAC;UAElC,CAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAAAjC,OAAA;MAAKkB,SAAS,EAAC,iBAAiB;MAAAD,QAAA,gBAClCjB,OAAA;QAAKkB,SAAS,EAAC,YAAY;QAACuB,GAAG,EAAErC,eAAe,CAACsC,IAAK;QAACC,GAAG,EAAC;MAAoB;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClFjC,OAAA;QAAQkB,SAAS,EAAC,cAAc;QAACmB,IAAI,EAAC,QAAQ;QAC1ClB,OAAO,EAAEA,CAAA,KAAMb,QAAQ,CAACZ,oBAAoB,CAACU,eAAe,CAAC,CAAE;QAAAa,QAAA,eAC3DjB,OAAA,CAACF,eAAe;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAC5B,EAAA,CA5DWF,oBAAoB;EAAA,QACZZ,cAAc,EACTC,cAAc,EACWI,yBAAyB;AAAA;AAAAgD,EAAA,GAH/DzC,oBAAoB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}